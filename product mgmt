class Product:
    """Class to represent an insurance product."""

    def __init__(self, product_id, name, coverage_amount, premium, product):
        self.product_id = product_id
        self.name = name
        self.coverage_amount = coverage_amount
        self.premium = premium
        self.product_type = product_type  # Type of insurance (e.g., Home insurance, Health insurance, etc.)
        self.active = True  # Product is active by default

    def __repr__(self):
        status = "Active" if self.active else "Suspended"
        return (f"Product(ID: {self.product_id}, Name: {self.name}, Coverage: ${self.coverage_amount}, "
                f"Premium: ${self.premium}, Type: {self.product_type}, Status: {status})")

    @staticmethod
    def create_product(product_id, name, coverage_amount, premium, product_type, product_db):
        """Creates and adds a new product to the product database."""
        if product_id not in product_db:
            new_product = Product(product_id, name, coverage_amount, premium, product_type)
            product_db[product_id] = new_product
            print(f"Product '{name}' (ID: {product_id}) created successfully.")
        else:
            print(f"Product ID {product_id} already exists in the database.")

    def update_product(self, name=None, coverage_amount=None, premium=None, product_type=None):
        """Updates the details of the product."""
        if name:
            self.name = name
        if coverage_amount:
            self.coverage_amount = coverage_amount
        if premium:
            self.premium = premium
        if product_type:
            self.product_type = product_type
        print(f"Product ID {self.product_id} has been updated.")

    def remove_product(self, product_db):
        """Suspends or removes the product from the product database."""
        if self.active:
            self.active = False
            print(f"Product ID {self.product_id} has been suspended.")
        else:
            print(f"Product ID {self.product_id} is already suspended.")
        if self.product_id in product_db:
            del product_db[self.product_id]
            print(f"Product ID {self.product_id} removed from database.")

    def activate_product(self):
        """Reactivates a suspended product."""
        if not self.active:
            self.active = True
            print(f"Product ID {self.product_id} has been reactivated.")
        else:
            print(f"Product ID {self.product_id} is already active.")
